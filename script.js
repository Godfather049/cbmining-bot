// KullanÄ±cÄ± verileri
let user = {
  balance: 0,
  mining: false,
  miningEnd: null,
  tonBalance: 2.0,
  clickedRefs: [],
  lastSpin: null
};

// DOM Elementleri
const balanceEl = document.getElementById('balance');
const miningBtn = document.getElementById('miningBtn');
const timerEl = document.getElementById('timer');
const premiumBtn = document.getElementById('premiumBtn');

// Madencilik baÅŸlat
function startMining() {
  if(user.mining) return;
  
  user.mining = true;
  user.miningEnd = Date.now() + 8 * 60 * 60 * 1000; // 8 saat
  
  miningBtn.classList.add('active');
  updateTimer();
  
  setTimeout(() => {
    user.balance += 90;
    user.mining = false;
    updateUI();
    showNotification("Madencilik tamamlandÄ±! +90 CB kazandÄ±nÄ±z.");
  }, 8 * 60 * 60 * 1000);
}

// Premium madencilik
function startPremiumMining() {
  if(user.tonBalance < 1.5) {
    showNotification("Yeterli TON bakiyeniz yok!");
    return;
  }
  
  user.tonBalance -= 1.5;
  sendPaymentToAdmin(1.5);
  startMining();
}

// Ã–demeyi admin cÃ¼zdanÄ±na gÃ¶nder
function sendPaymentToAdmin(amount) {
  // Burada TON blockchain iÅŸlemi yapÄ±lacak
  console.log(`${amount} TON admin cÃ¼zdanÄ±na gÃ¶nderildi: UQB7Qq8821NNJJ5JGp4GbnV66sLWxEDFCtpUUYOaBbW2RpIL`);
}

// Geri sayÄ±m
function updateTimer() {
  const now = Date.now();
  const distance = user.miningEnd - now;
  
  if(distance <= 0) {
    timerEl.textContent = "MadenciliÄŸi BaÅŸlat";
    miningBtn.classList.remove('active');
    return;
  }
  
  const hours = Math.floor(distance / (1000 * 60 * 60));
  const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
  const seconds = Math.floor((distance % (1000 * 60)) / 1000);
  
  timerEl.textContent = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
  
  if(distance > 0) {
    setTimeout(updateTimer, 1000);
  }
}

// Spin fonksiyonu
function openSpin() {
  const today = new Date().toDateString();
  
  if(user.lastSpin === today) {
    showNotification("GÃ¼nlÃ¼k Ã¼cretsiz spininizi zaten kullandÄ±nÄ±z!\nEk spinler iÃ§in TON veya CBANK yatÄ±rÄ±n.");
    return;
  }
  
  user.lastSpin = today;
  const prize = Math.floor(Math.random() * 10) + 1; // 1-10 CB arasÄ±
  user.balance += prize;
  updateUI();
  showNotification(`Tebrikler! Spin Ã§arkÄ±ndan ${prize} CB kazandÄ±nÄ±z!`);
}

// GÃ¶revler
function openTasks() {
  const refLinks = [
    { url: "https://t.me/blum/app?startapp=ref_M96qo1sLIr", clicked: false },
    { url: "https://t.me/boinker_bot/boinkapp?startapp=boink1463264622", clicked: false },
    { url: "https://t.me/cbankmining", clicked: false },
    { url: "https://t.me/blumcrypto_memepad", clicked: false },
    { url: "https://t.me/theYescoin_bot/Yescoin?startapp=GtNgBb", clicked: false }
  ];
  
  let message = "GÃ¶revler (Her biri 10 CB kazandÄ±rÄ±r):\n\n";
  refLinks.forEach((link, index) => {
    const isClicked = user.clickedRefs.includes(link.url);
    message += `${index+1}. ${isClicked ? 'âœ… ' : 'ğŸ”— '}${link.url}\n`;
  });
  
  const choice = prompt(message + "\nTamamladÄ±ÄŸÄ±nÄ±z gÃ¶revin numarasÄ±nÄ± girin:");
  if(choice && refLinks[choice-1] && !user.clickedRefs.includes(refLinks[choice-1].url)) {
    user.clickedRefs.push(refLinks[choice-1].url);
    user.balance += 10;
    updateUI();
    showNotification("10 CB kazandÄ±nÄ±z! GÃ¶rev tamamlandÄ±.");
  }
}

// Klan fonksiyonlarÄ±
function openClan() {
  const action = prompt("Klan iÅŸlemleri:\n1. Klan oluÅŸtur\n2. Klana katÄ±l\n3. KlanÄ±mÄ± yÃ¶net\n\nSeÃ§iminiz (1-3):");
  
  if(action === "1") {
    showNotification("Klan oluÅŸturmak iÃ§in 5 TON gereklidir.");
  } else if(action === "2") {
    const clanId = prompt("KatÄ±lmak istediÄŸiniz klan ID'sini girin:");
    showNotification(`${clanId} klanÄ±na katÄ±lma isteÄŸi gÃ¶nderildi.`);
  }
}

// Liderlik tablosu
function openLeaderboard() {
  showNotification("Liderlik tablosu yÃ¼kleniyor...\n\n1. KullanÄ±cÄ±1 - 1500 CB\n2. KullanÄ±cÄ±2 - 1200 CB\n...\n100. KullanÄ±cÄ±100 - 300 CB\n\nSizin sÄ±ralamanÄ±z: 100+");
}

// Bildirim gÃ¶ster
function showNotification(message) {
  alert(message);
}

// ArayÃ¼zÃ¼ gÃ¼ncelle
function updateUI() {
  balanceEl.textContent = user.balance;
}

// Event listeners
miningBtn.addEventListener('click', startMining);
premiumBtn.addEventListener('click', startPremiumMining);

// Telegram WebApp entegrasyonu
if(window.Telegram && Telegram.WebApp) {
  Telegram.WebApp.expand();
  
  // KullanÄ±cÄ± verilerini Telegram'dan al
  const tgUser = Telegram.WebApp.initDataUnsafe.user;
  if(tgUser) {
    user.id = tgUser.id;
    user.username = tgUser.username;
  }
    }
